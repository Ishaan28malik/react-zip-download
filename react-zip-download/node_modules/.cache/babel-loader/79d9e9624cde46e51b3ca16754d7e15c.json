{"ast":null,"code":"'use strict';\n/*globals Promise */\n\nvar JSZipUtils = {}; // just use the responseText with xhr1, response with xhr2.\n// The transformation doesn't throw away high-order byte (with responseText)\n// because JSZip handles that case. If not used with JSZip, you may need to\n// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\n\nJSZipUtils._getBinaryFromXHR = function (xhr) {\n  // for xhr.responseText, the 0xFF mask is applied by JSZip\n  return xhr.response || xhr.responseText;\n}; // taken from jQuery\n\n\nfunction createStandardXHR() {\n  try {\n    return new window.XMLHttpRequest();\n  } catch (e) {}\n}\n\nfunction createActiveXHR() {\n  try {\n    return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n  } catch (e) {}\n} // Create the request object\n\n\nvar createXHR = typeof window !== \"undefined\" && window.ActiveXObject ?\n/* Microsoft failed to properly\n * implement the XMLHttpRequest in IE7 (can't request local files),\n * so we use the ActiveXObject when it is available\n * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n * we need a fallback.\n */\nfunction () {\n  return createStandardXHR() || createActiveXHR();\n} : // For all other browsers, use the standard XMLHttpRequest object\ncreateStandardXHR;\n/**\n * @param  {string} path    The path to the resource to GET.\n * @param  {function|{callback: function, progress: function}} options\n * @return {Promise|undefined} If no callback is passed then a promise is returned\n */\n\nJSZipUtils.getBinaryContent = function (path, options) {\n  var promise, resolve, reject;\n  var callback;\n\n  if (!options) {\n    options = {};\n  } // backward compatible callback\n\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (typeof options.callback === 'function') {\n    // callback inside options object\n    callback = options.callback;\n  }\n\n  if (!callback && typeof Promise !== \"undefined\") {\n    promise = new Promise(function (_resolve, _reject) {\n      resolve = _resolve;\n      reject = _reject;\n    });\n  } else {\n    resolve = function (data) {\n      callback(null, data);\n    };\n\n    reject = function (err) {\n      callback(err, null);\n    };\n  }\n  /*\n   * Here is the tricky part : getting the data.\n   * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'\n   * is enough, the result is in the standard xhr.responseText.\n   * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers\n   * In IE <= 9, we must use (the IE only) attribute responseBody\n   * (for binary data, its content is different from responseText).\n   * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the\n   * responseType will work :\n   * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download\n   *\n   * I'd like to use jQuery to avoid this XHR madness, but it doesn't support\n   * the responseType attribute : http://bugs.jquery.com/ticket/11461\n   */\n\n\n  try {\n    var xhr = createXHR();\n    xhr.open('GET', path, true); // recent browsers\n\n    if (\"responseType\" in xhr) {\n      xhr.responseType = \"arraybuffer\";\n    } // older browser\n\n\n    if (xhr.overrideMimeType) {\n      xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    }\n\n    xhr.onreadystatechange = function (event) {\n      // use `xhr` and not `this`... thanks IE\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 0) {\n          try {\n            resolve(JSZipUtils._getBinaryFromXHR(xhr));\n          } catch (err) {\n            reject(new Error(err));\n          }\n        } else {\n          reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n        }\n      }\n    };\n\n    if (options.progress) {\n      xhr.onprogress = function (e) {\n        options.progress({\n          path: path,\n          originalEvent: e,\n          percent: e.loaded / e.total * 100,\n          loaded: e.loaded,\n          total: e.total\n        });\n      };\n    }\n\n    xhr.send();\n  } catch (e) {\n    reject(new Error(e), null);\n  } // returns a promise or undefined depending on whether a callback was\n  // provided\n\n\n  return promise;\n}; // export\n\n\nmodule.exports = JSZipUtils; // enforcing Stuk's coding style\n// vim: set shiftwidth=4 softtabstop=4:","map":{"version":3,"sources":["/home/championrunner/react-zip-download/react-zip-download/node_modules/jszip-utils/lib/index.js"],"names":["JSZipUtils","_getBinaryFromXHR","xhr","response","responseText","createStandardXHR","window","XMLHttpRequest","e","createActiveXHR","ActiveXObject","createXHR","getBinaryContent","path","options","promise","resolve","reject","callback","Promise","_resolve","_reject","data","err","open","responseType","overrideMimeType","onreadystatechange","event","readyState","status","Error","statusText","progress","onprogress","originalEvent","percent","loaded","total","send","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/*globals Promise */\n\nvar JSZipUtils = {};\n// just use the responseText with xhr1, response with xhr2.\n// The transformation doesn't throw away high-order byte (with responseText)\n// because JSZip handles that case. If not used with JSZip, you may need to\n// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data\nJSZipUtils._getBinaryFromXHR = function (xhr) {\n    // for xhr.responseText, the 0xFF mask is applied by JSZip\n    return xhr.response || xhr.responseText;\n};\n\n// taken from jQuery\nfunction createStandardXHR() {\n    try {\n        return new window.XMLHttpRequest();\n    } catch( e ) {}\n}\n\nfunction createActiveXHR() {\n    try {\n        return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch( e ) {}\n}\n\n// Create the request object\nvar createXHR = (typeof window !== \"undefined\" && window.ActiveXObject) ?\n    /* Microsoft failed to properly\n     * implement the XMLHttpRequest in IE7 (can't request local files),\n     * so we use the ActiveXObject when it is available\n     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n     * we need a fallback.\n     */\n    function() {\n    return createStandardXHR() || createActiveXHR();\n} :\n    // For all other browsers, use the standard XMLHttpRequest object\n    createStandardXHR;\n\n\n/**\n * @param  {string} path    The path to the resource to GET.\n * @param  {function|{callback: function, progress: function}} options\n * @return {Promise|undefined} If no callback is passed then a promise is returned\n */\nJSZipUtils.getBinaryContent = function (path, options) {\n    var promise, resolve, reject;\n    var callback;\n\n    if (!options) {\n        options = {};\n    }\n\n    // backward compatible callback\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else if (typeof options.callback === 'function') {\n        // callback inside options object\n        callback = options.callback;\n    }\n\n    if (!callback && typeof Promise !== \"undefined\") {\n        promise = new Promise(function (_resolve, _reject) {\n            resolve = _resolve;\n            reject = _reject;\n        });\n    } else {\n        resolve = function (data) { callback(null, data); };\n        reject = function (err) { callback(err, null); };\n    }\n\n    /*\n     * Here is the tricky part : getting the data.\n     * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'\n     * is enough, the result is in the standard xhr.responseText.\n     * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers\n     * In IE <= 9, we must use (the IE only) attribute responseBody\n     * (for binary data, its content is different from responseText).\n     * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the\n     * responseType will work :\n     * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download\n     *\n     * I'd like to use jQuery to avoid this XHR madness, but it doesn't support\n     * the responseType attribute : http://bugs.jquery.com/ticket/11461\n     */\n    try {\n        var xhr = createXHR();\n\n        xhr.open('GET', path, true);\n\n        // recent browsers\n        if (\"responseType\" in xhr) {\n            xhr.responseType = \"arraybuffer\";\n        }\n\n        // older browser\n        if(xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n        }\n\n        xhr.onreadystatechange = function (event) {\n            // use `xhr` and not `this`... thanks IE\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0) {\n                    try {\n                        resolve(JSZipUtils._getBinaryFromXHR(xhr));\n                    } catch(err) {\n                        reject(new Error(err));\n                    }\n                } else {\n                    reject(new Error(\"Ajax error for \" + path + \" : \" + this.status + \" \" + this.statusText));\n                }\n            }\n        };\n\n        if(options.progress) {\n            xhr.onprogress = function(e) {\n                options.progress({\n                    path: path,\n                    originalEvent: e,\n                    percent: e.loaded / e.total * 100,\n                    loaded: e.loaded,\n                    total: e.total\n                });\n            };\n        }\n\n        xhr.send();\n\n    } catch (e) {\n        reject(new Error(e), null);\n    }\n\n    // returns a promise or undefined depending on whether a callback was\n    // provided\n    return promise;\n};\n\n// export\nmodule.exports = JSZipUtils;\n\n// enforcing Stuk's coding style\n// vim: set shiftwidth=4 softtabstop=4:\n"]},"metadata":{},"sourceType":"script"}